{"version":3,"names":[],"mappings":"","sources":["dap.bundle.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DAPjs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proxy_1 = require(\"../proxy\");\nvar cmsis_dap_1 = require(\"../proxy/cmsis-dap\");\n/**\n * Arm Debug Interface class\n */\nvar ADI = /** @class */ (function () {\n    function ADI(transportOrDap, mode, clockFrequency) {\n        if (mode === void 0) { mode = 0 /* DEFAULT */; }\n        if (clockFrequency === void 0) { clockFrequency = cmsis_dap_1.DEFAULT_CLOCK_FREQUENCY; }\n        this.selectedAddress = null;\n        this.cswValue = null;\n        function isTransport(test) {\n            return test.open !== undefined;\n        }\n        this.proxy = isTransport(transportOrDap) ? new proxy_1.CmsisDAP(transportOrDap, mode, clockFrequency) : transportOrDap;\n    }\n    ADI.prototype.delay = function (timeout) {\n        return new Promise(function (resolve, _reject) {\n            setTimeout(resolve, timeout);\n        });\n    };\n    /**\n     * Continually run a function until it returns true\n     * @param fn The function to run\n     * @param timer The millisecoinds to wait between each run\n     * @param timeout Optional timeout to wait before giving up and rejecting\n     * @returns Promise\n     */\n    ADI.prototype.waitDelay = function (fn, timer, timeout) {\n        var _this = this;\n        if (timer === void 0) { timer = 100; }\n        if (timeout === void 0) { timeout = 0; }\n        var running = true;\n        var chain = function (condition) {\n            if (running) {\n                return condition\n                    ? Promise.resolve()\n                    : _this.delay(timer)\n                        .then(fn)\n                        .then(chain);\n            }\n        };\n        return new Promise(function (resolve, reject) {\n            if (timeout > 0) {\n                setTimeout(function () {\n                    running = false;\n                    reject(\"Wait timed out\");\n                }, timeout);\n            }\n            return chain(false)\n                .then(function () { return resolve(); });\n        });\n    };\n    ADI.prototype.concatTypedArray = function (arrays) {\n        // Only one array exists\n        if (arrays.length === 1)\n            return arrays[0];\n        // Determine array length\n        var length = 0;\n        for (var _i = 0, arrays_1 = arrays; _i < arrays_1.length; _i++) {\n            var array = arrays_1[_i];\n            length += array.length;\n        }\n        // Concat the arrays\n        var result = new Uint32Array(length);\n        for (var i = 0, j = 0; i < arrays.length; i++) {\n            result.set(arrays[i], j);\n            j += arrays[i].length;\n        }\n        return result;\n    };\n    ADI.prototype.readDPCommand = function (register) {\n        return [{\n                mode: 2 /* READ */,\n                port: 0 /* DEBUG */,\n                register: register\n            }];\n    };\n    ADI.prototype.writeDPCommand = function (register, value) {\n        if (register === 8 /* SELECT */) {\n            if (value === this.selectedAddress) {\n                return [];\n            }\n            this.selectedAddress = value;\n        }\n        return [{\n                mode: 0 /* WRITE */,\n                port: 0 /* DEBUG */,\n                register: register,\n                value: value\n            }];\n    };\n    ADI.prototype.readAPCommand = function (register) {\n        var address = (register & 4278190080 /* APSEL */) | (register & 240 /* APBANKSEL */);\n        return this.writeDPCommand(8 /* SELECT */, address).concat({\n            mode: 2 /* READ */,\n            port: 1 /* ACCESS */,\n            register: register\n        });\n    };\n    ADI.prototype.writeAPCommand = function (register, value) {\n        if (register === 0 /* CSW */) {\n            if (value === this.cswValue) {\n                return [];\n            }\n            this.cswValue = value;\n        }\n        var address = (register & 4278190080 /* APSEL */) | (register & 240 /* APBANKSEL */);\n        return this.writeDPCommand(8 /* SELECT */, address).concat({\n            mode: 0 /* WRITE */,\n            port: 1 /* ACCESS */,\n            register: register,\n            value: value\n        });\n    };\n    ADI.prototype.readMem16Command = function (register) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 1 /* SIZE_16 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.readAPCommand(12 /* DRW */));\n    };\n    ADI.prototype.writeMem16Command = function (register, value) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 1 /* SIZE_16 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.writeAPCommand(12 /* DRW */, value));\n    };\n    ADI.prototype.readMem32Command = function (register) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.readAPCommand(12 /* DRW */));\n    };\n    ADI.prototype.writeMem32Command = function (register, value) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.writeAPCommand(12 /* DRW */, value));\n    };\n    ADI.prototype.transferSequence = function (operations) {\n        var _this = this;\n        // Flatten operations into single array\n        var merged = [].concat.apply([], operations);\n        var chain = Promise.resolve([]);\n        var _loop_1 = function () {\n            var sequence = merged.splice(0, this_1.proxy.operationCount);\n            chain = chain.then(function (results) { return _this.proxy.transfer(sequence).then(function (result) { return results.concat([result]); }); });\n        };\n        var this_1 = this;\n        // Split operations into sequences no longer than operation count\n        while (merged.length) {\n            _loop_1();\n        }\n        return chain\n            .then(function (arrays) { return _this.concatTypedArray(arrays); });\n    };\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    ADI.prototype.connect = function () {\n        var _this = this;\n        var mask = 536870912 /* CDBGPWRUPACK */ | -2147483648 /* CSYSPWRUPACK */;\n        return this.proxy.connect()\n            .then(function () { return _this.readDP(0 /* DPIDR */); })\n            .then(function () { return _this.transferSequence([\n            _this.writeDPCommand(0 /* ABORT */, 4 /* STKERRCLR */),\n            _this.writeDPCommand(8 /* SELECT */, 0 /* CSW */),\n            _this.writeDPCommand(4 /* CTRL_STAT */, 1073741824 /* CSYSPWRUPREQ */ | 268435456 /* CDBGPWRUPREQ */)\n        ]); })\n            .then(function () { return _this.waitDelay(function () {\n            return _this.readDP(4 /* CTRL_STAT */)\n                .then(function (status) { return ((status & mask) === mask); });\n        }); });\n    };\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    ADI.prototype.disconnect = function () {\n        return this.proxy.disconnect();\n    };\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    ADI.prototype.reconnect = function () {\n        var _this = this;\n        return this.disconnect()\n            .then(function () { return _this.delay(100); })\n            .then(function () { return _this.connect(); });\n    };\n    /**\n     * Reset target device\n     * @returns Promise\n     */\n    ADI.prototype.reset = function () {\n        return this.proxy.reset();\n    };\n    /**\n     * Read from a debug port register\n     * @param register DP register to read\n     * @returns Promise of register value\n     */\n    ADI.prototype.readDP = function (register) {\n        return this.proxy.transfer(this.readDPCommand(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write to a debug port register\n     * @param register DP register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeDP = function (register, value) {\n        return this.proxy.transfer(this.writeDPCommand(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read from an access port register\n     * @param register AP register to read\n     * @returns Promise of register value\n     */\n    ADI.prototype.readAP = function (register) {\n        return this.proxy.transfer(this.readAPCommand(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write to an access port register\n     * @param register AP register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeAP = function (register, value) {\n        return this.proxy.transfer(this.writeAPCommand(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read a 16-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    ADI.prototype.readMem16 = function (register) {\n        return this.proxy.transfer(this.readMem16Command(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write a 16-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeMem16 = function (register, value) {\n        value = value << ((register & 0x02) << 3);\n        return this.proxy.transfer(this.writeMem16Command(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read a 32-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    ADI.prototype.readMem32 = function (register) {\n        return this.proxy.transfer(this.readMem32Command(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write a 32-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeMem32 = function (register, value) {\n        return this.proxy.transfer(this.writeMem32Command(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read a block of 32-bit words from a memory access port register\n     * @param register ID of register to read from\n     * @param count The count of values to read\n     * @returns Promise of register data\n     */\n    ADI.prototype.readBlock = function (register, count) {\n        var _this = this;\n        var chain = this.transferSequence([\n            this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */),\n            this.writeAPCommand(4 /* TAR */, register),\n        ])\n            .then(function () { return []; });\n        // Split into requests no longer than block size\n        var remainder = count;\n        var _loop_2 = function () {\n            var chunkSize = Math.min(remainder, this_2.proxy.blockSize);\n            chain = chain.then(function (results) { return _this.proxy.transferBlock(1 /* ACCESS */, 12 /* DRW */, chunkSize)\n                .then(function (result) { return results.concat([result]); }); });\n            remainder -= chunkSize;\n        };\n        var this_2 = this;\n        while (remainder > 0) {\n            _loop_2();\n        }\n        return chain\n            .then(function (arrays) { return _this.concatTypedArray(arrays); });\n    };\n    /**\n     * Write a block of 32-bit words to a memory access port register\n     * @param register ID of register to write to\n     * @param values The values to write\n     * @returns Promise\n     */\n    ADI.prototype.writeBlock = function (register, values) {\n        var _this = this;\n        var chain = this.transferSequence([\n            this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */),\n            this.writeAPCommand(4 /* TAR */, register),\n        ])\n            .then(function () { return undefined; });\n        // Split values into chunks no longer than block size\n        var index = 0;\n        var _loop_3 = function () {\n            var chunk = values.slice(index, index + this_3.proxy.blockSize);\n            chain = chain.then(function () { return _this.proxy.transferBlock(1 /* ACCESS */, 12 /* DRW */, chunk); });\n            index += this_3.proxy.blockSize;\n        };\n        var this_3 = this;\n        while (index < values.length) {\n            _loop_3();\n        }\n        return chain;\n    };\n    return ADI;\n}());\nexports.ADI = ADI;\n\n\n\n},{\"../proxy\":7,\"../proxy/cmsis-dap\":6}],2:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar adi_1 = require(\"./adi\");\nexports.ADI = adi_1.ADI;\n\n\n\n},{\"./adi\":1}],3:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proxy_1 = require(\"../proxy\");\n/**\n * @hidden\n */\nvar DEFAULT_BAUDRATE = 9600;\n/**\n * @hidden\n */\nvar SERIAL_DELAY = 200;\n/**\n * @hidden\n */\nvar PAGE_SIZE = 62;\n/**\n * DAPLink Class\n */\nvar DAPLink = /** @class */ (function (_super) {\n    __extends(DAPLink, _super);\n    function DAPLink() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.timer = null;\n        return _this;\n    }\n    /**\n     * Detect if buffer contains text or binary data\n     */\n    DAPLink.prototype.isBufferBinary = function (buffer) {\n        var bufferString = String.fromCharCode.apply(null, new Uint16Array(buffer, 0, 50));\n        for (var i = 0; i < bufferString.length; i++) {\n            var charCode = bufferString.charCodeAt(i);\n            // 65533 is a code for unknown character\n            // 0-8 are codes for control characters\n            if (charCode === 65533 || charCode <= 8) {\n                return true;\n            }\n        }\n        return false;\n    };\n    DAPLink.prototype.writeBuffer = function (buffer, offset) {\n        var _this = this;\n        if (offset === void 0) { offset = 0; }\n        var end = Math.min(buffer.byteLength, offset + PAGE_SIZE);\n        var page = buffer.slice(offset, end);\n        var data = new Uint8Array(page.byteLength + 1);\n        data.set([page.byteLength]);\n        data.set(new Uint8Array(page), 1);\n        return this.send(140 /* WRITE */, data)\n            .then(function () {\n            _this.emit(DAPLink.EVENT_PROGRESS, offset / buffer.byteLength);\n            if (end < buffer.byteLength) {\n                return _this.writeBuffer(buffer, end);\n            }\n        });\n    };\n    /**\n     * Flash the target\n     * @param buffer The image to flash\n     * @returns Promise\n     */\n    DAPLink.prototype.flash = function (buffer) {\n        var _this = this;\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(buffer) ? buffer.buffer : buffer;\n        var streamType = this.isBufferBinary(arrayBuffer) ? 0 : 1;\n        return this.send(138 /* OPEN */, new Uint32Array([streamType]))\n            .then(function (result) {\n            // An error occurred\n            if (result.getUint8(1) !== 0)\n                return;\n            return _this.writeBuffer(arrayBuffer);\n        })\n            .then(function () {\n            _this.emit(DAPLink.EVENT_PROGRESS, 1.0);\n            return _this.send(139 /* CLOSE */);\n        })\n            .then(function (result) {\n            // An error occurred\n            if (result.getUint8(1) !== 0)\n                return;\n            return _this.send(137 /* RESET */);\n        })\n            .then(function () { return undefined; });\n    };\n    /**\n     * Get the serial baud rate setting\n     * @returns Promise of baud rate\n     */\n    DAPLink.prototype.getSerialBaudrate = function () {\n        return this.send(129 /* READ_SETTINGS */)\n            .then(function (result) {\n            return result.getUint32(1, true);\n        });\n    };\n    /**\n     * Set the serial baud rate setting\n     * @param baudrate The baudrate to use (defaults to 9600)\n     * @returns Promise\n     */\n    DAPLink.prototype.setSerialBaudrate = function (baudrate) {\n        if (baudrate === void 0) { baudrate = DEFAULT_BAUDRATE; }\n        return this.send(130 /* WRITE_SETTINGS */, new Uint32Array([baudrate]))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Start listening for serial data\n     */\n    DAPLink.prototype.startSerialRead = function () {\n        var _this = this;\n        this.stopSerialRead();\n        this.timer = setInterval(function () {\n            return _this.send(131 /* READ */)\n                .then(function (serialData) {\n                if (serialData.byteLength > 0) {\n                    // check if there is any data returned from the device\n                    if (serialData.getUint8(1) !== 0) {\n                        var data = String.fromCharCode.apply(null, new Uint8Array(serialData.buffer.slice(1)));\n                        _this.emit(DAPLink.EVENT_SERIAL_DATA, data);\n                    }\n                }\n            });\n        }, SERIAL_DELAY);\n    };\n    /**\n     * Stop listening for serial data\n     */\n    DAPLink.prototype.stopSerialRead = function () {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    };\n    /**\n     * Write serial data\n     * @param data The data to write\n     * @returns Promise\n     */\n    DAPLink.prototype.serialWrite = function (data) {\n        var arrayData = data.split(\"\").map(function (e) { return e.charCodeAt(0); });\n        arrayData.unshift(arrayData.length);\n        return this.send(132 /* WRITE */, new Uint16Array(arrayData).buffer)\n            .then(function () { return undefined; });\n    };\n    /**\n     * Progress event\n     * @event\n     */\n    DAPLink.EVENT_PROGRESS = \"progress\";\n    /**\n     * Serial read event\n     * @event\n     */\n    DAPLink.EVENT_SERIAL_DATA = \"serial\";\n    return DAPLink;\n}(proxy_1.CmsisDAP));\nexports.DAPLink = DAPLink;\n\n\n\n},{\"../proxy\":7}],4:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dap_1 = require(\"../dap\");\n/**\n * @hidden\n */\nvar EXECUTE_TIMEOUT = 10000;\n/**\n * @hidden\n */\nvar BKPT_INSTRUCTION = 0xBE2A;\n/**\n * @hidden\n */\nvar GENERAL_REGISTER_COUNT = 12;\n/**\n * Cortex M class\n */\nvar CortexM = /** @class */ (function (_super) {\n    __extends(CortexM, _super);\n    function CortexM() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CortexM.prototype.enableDebug = function () {\n        return this.writeMem32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */);\n    };\n    CortexM.prototype.readCoreRegisterCommand = function (register) {\n        return this.writeMem32Command(3758157300 /* DCRSR */, register)\n            .concat(this.readMem32Command(3758157296 /* DHCSR */))\n            .concat(this.readMem32Command(3758157304 /* DCRDR */));\n    };\n    CortexM.prototype.writeCoreRegisterCommand = function (register, value) {\n        return this.writeMem32Command(3758157304 /* DCRDR */, value)\n            .concat(this.writeMem32Command(3758157300 /* DCRSR */, register | 65536 /* REGWnR */));\n    };\n    /**\n     * Get the state of the processor core\n     * @returns Promise of CoreState\n     */\n    CortexM.prototype.getState = function () {\n        var _this = this;\n        return this.readMem32(3758157296 /* DHCSR */)\n            .then(function (dhcsr) {\n            var state;\n            if (dhcsr & 524288 /* S_LOCKUP */)\n                state = 1 /* LOCKUP */;\n            else if (dhcsr & 262144 /* S_SLEEP */)\n                state = 2 /* SLEEPING */;\n            else if (dhcsr & 131072 /* S_HALT */)\n                state = 3 /* DEBUG */;\n            else\n                state = 4 /* RUNNING */;\n            if (dhcsr & 33554432 /* S_RESET_ST */) {\n                // The core has been reset, check if an instruction has run\n                return _this.readMem32(3758157296 /* DHCSR */)\n                    .then(function (newDhcsr) {\n                    if (newDhcsr & 33554432 /* S_RESET_ST */ && !(newDhcsr & 16777216 /* S_RETIRE_ST */)) {\n                        return 0 /* RESET */;\n                    }\n                    else {\n                        return state;\n                    }\n                });\n            }\n            else {\n                return state;\n            }\n        });\n    };\n    /**\n     * Whether the target is halted\n     * @returns Promise of halted state\n     */\n    CortexM.prototype.isHalted = function () {\n        return this.readMem32(3758157296 /* DHCSR */)\n            .then(function (dhcsr) {\n            return !!(dhcsr & 131072 /* S_HALT */);\n        });\n    };\n    /**\n     * Halt the target\n     * @param wait Wait until halted before returning\n     * @param timeout Milliseconds to wait before aborting wait\n     * @returns Promise\n     */\n    CortexM.prototype.halt = function (wait, timeout) {\n        var _this = this;\n        if (wait === void 0) { wait = true; }\n        if (timeout === void 0) { timeout = 0; }\n        return this.isHalted()\n            .then(function (halted) {\n            if (halted)\n                return;\n            return _this.writeMem32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */)\n                .then(function () {\n                if (!wait)\n                    return;\n                return _this.waitDelay(function () { return _this.isHalted(); }, 100, timeout);\n            });\n        });\n    };\n    /**\n     * Resume a target\n     * @param wait Wait until resumed before returning\n     * @param timeout Milliseconds to wait before aborting wait\n     * @returns Promise\n     */\n    CortexM.prototype.resume = function (wait, timeout) {\n        var _this = this;\n        if (wait === void 0) { wait = true; }\n        if (timeout === void 0) { timeout = 0; }\n        return this.isHalted()\n            .then(function (halted) {\n            if (!halted)\n                return;\n            return _this.writeMem32(3758157104 /* DFSR */, 4 /* DWTTRAP */ | 2 /* BKPT */ | 1 /* HALTED */)\n                .then(function () { return _this.enableDebug(); })\n                .then(function () {\n                if (!wait)\n                    return;\n                return _this.waitDelay(function () { return _this.isHalted().then(function (result) { return !result; }); }, 100, timeout);\n            });\n        });\n    };\n    /**\n     * Read from a core register\n     * @param register The register to read\n     * @returns Promise of value\n     */\n    CortexM.prototype.readCoreRegister = function (register) {\n        var _this = this;\n        return this.transferSequence([\n            this.writeMem32Command(3758157300 /* DCRSR */, register),\n            this.readMem32Command(3758157296 /* DHCSR */)\n        ])\n            .then(function (results) {\n            var dhcsr = results[0];\n            if (!(dhcsr & 65536 /* S_REGRDY */)) {\n                throw new Error(\"Register not ready\");\n            }\n            return _this.readMem32(3758157304 /* DCRDR */);\n        });\n    };\n    /**\n     * Read an array of core registers\n     * @param registers The registers to read\n     * @returns Promise of register values in an array\n     */\n    CortexM.prototype.readCoreRegisters = function (registers) {\n        var _this = this;\n        var chain = Promise.resolve([]);\n        registers.forEach(function (register) {\n            chain = chain.then(function (results) { return _this.readCoreRegister(register).then(function (result) { return results.concat([result]); }); });\n        });\n        return chain;\n    };\n    /**\n     * Write to a core register\n     * @param register The register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    CortexM.prototype.writeCoreRegister = function (register, value) {\n        return this.transferSequence([\n            this.writeMem32Command(3758157304 /* DCRDR */, value),\n            this.writeMem32Command(3758157300 /* DCRSR */, register | 65536 /* REGWnR */),\n            this.readMem32Command(3758157296 /* DHCSR */)\n        ])\n            .then(function (results) {\n            var dhcsr = results[0];\n            if (!(dhcsr & 65536 /* S_REGRDY */)) {\n                throw new Error(\"Register not ready\");\n            }\n        });\n    };\n    /**\n     * Exucute code at a specified memory address\n     * @param address The address to put the code\n     * @param code The code to use\n     * @param stackPointer The stack pointer to use\n     * @param programCounter The program counter to use\n     * @param linkRegister The link register to use (defaults to address + 1)\n     * @param registers Values to add to the general purpose registers, R0, R1, R2, etc.\n     */\n    CortexM.prototype.execute = function (address, code, stackPointer, programCounter, linkRegister) {\n        var _this = this;\n        if (linkRegister === void 0) { linkRegister = address + 1; }\n        var registers = [];\n        for (var _i = 5; _i < arguments.length; _i++) {\n            registers[_i - 5] = arguments[_i];\n        }\n        // Ensure a breakpoint exists at the end of the code\n        if (code[code.length - 1] !== BKPT_INSTRUCTION) {\n            var newCode = new Uint32Array(code.length + 1);\n            newCode.set(code);\n            newCode.set([BKPT_INSTRUCTION], code.length - 1);\n            code = newCode;\n        }\n        // Create sequence of core register writes\n        var sequence = [\n            this.writeCoreRegisterCommand(13 /* SP */, stackPointer),\n            this.writeCoreRegisterCommand(15 /* PC */, programCounter),\n            this.writeCoreRegisterCommand(14 /* LR */, linkRegister)\n        ];\n        // Add in register values R0, R1, R2, etc.\n        for (var i = 0; i < Math.min(registers.length, GENERAL_REGISTER_COUNT); i++) {\n            sequence.push(this.writeCoreRegisterCommand(i, registers[i]));\n        }\n        return this.halt() // Halt the target\n            .then(function () { return _this.transferSequence(sequence); }) // Write the registers\n            .then(function () { return _this.writeBlock(address, code); }) // Write the code to the address\n            .then(function () { return _this.resume(false); }) // Resume the target, without waiting\n            .then(function () { return _this.waitDelay(function () { return _this.isHalted(); }, 100, EXECUTE_TIMEOUT); }) // Wait for the target to halt on the breakpoint\n            .then(function () { return undefined; }); // Return\n    };\n    return CortexM;\n}(dap_1.ADI));\nexports.CortexM = CortexM;\n\n\n\n},{\"../dap\":2}],5:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cortex_m_1 = require(\"./cortex-m\");\nexports.CortexM = cortex_m_1.CortexM;\n\n\n\n},{\"./cortex-m\":4}],6:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\n/**\n * @hidden\n */\nexports.DEFAULT_CLOCK_FREQUENCY = 10000000;\n/**\n * @hidden\n */\nvar SWD_SEQUENCE = 0xE79E;\n/**\n * @hidden\n */\nvar JTAG_SEQUENCE = 0xE73C;\n/**\n * @hidden\n */\nvar BLOCK_HEADER_SIZE = 4;\n/**\n * @hidden\n */\nvar TRANSFER_HEADER_SIZE = 2;\n/**\n * @hidden\n */\nvar TRANSFER_OPERATION_SIZE = 5;\n/**\n * CMSIS-DAP class\n * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__Commands__gr.html\n */\nvar CmsisDAP = /** @class */ (function (_super) {\n    __extends(CmsisDAP, _super);\n    /**\n     * CMSIS-DAP constructor\n     * @param transport Debug transport to use\n     * @param mode Debug mode to use\n     * @param clockFrequency Communication clock frequency to use (default 10000000)\n     */\n    function CmsisDAP(transport, mode, clockFrequency) {\n        if (mode === void 0) { mode = 0 /* DEFAULT */; }\n        if (clockFrequency === void 0) { clockFrequency = exports.DEFAULT_CLOCK_FREQUENCY; }\n        var _this = _super.call(this) || this;\n        _this.transport = transport;\n        _this.mode = mode;\n        _this.clockFrequency = clockFrequency;\n        // Determine the block size\n        _this.blockSize = _this.transport.packetSize - BLOCK_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER_BLOCK command\n        // Determine the operation count possible\n        var operationSpace = _this.transport.packetSize - TRANSFER_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER command\n        _this.operationCount = Math.floor(operationSpace / TRANSFER_OPERATION_SIZE);\n        return _this;\n    }\n    CmsisDAP.prototype.delay = function (timeout) {\n        return new Promise(function (resolve, _reject) {\n            setTimeout(resolve, timeout);\n        });\n    };\n    CmsisDAP.prototype.bufferSourceToUint8Array = function (prefix, data) {\n        if (!data) {\n            return new Uint8Array([prefix]);\n        }\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(data) ? data.buffer : data;\n        var result = new Uint8Array(arrayBuffer.byteLength + 1);\n        result.set([prefix]);\n        result.set(new Uint8Array(arrayBuffer), 1);\n        return result;\n    };\n    /**\n     * Switches the CMSIS-DAP unit to use SWD\n     * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0316d/Chdhfbhc.html\n     */\n    CmsisDAP.prototype.selectProtocol = function (protocol) {\n        var _this = this;\n        var sequence = protocol === 2 /* JTAG */ ? JTAG_SEQUENCE : SWD_SEQUENCE;\n        return this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])) // Sequence of 1's\n            .then(function () { return _this.swjSequence(new Uint16Array([sequence])); }) // Send protocol sequence\n            .then(function () { return _this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])); }) // Sequence of 1's\n            .then(function () { return _this.swjSequence(new Uint8Array([0x00])); });\n    };\n    /**\n     * Send an SWJ Sequence\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__SWJ__Sequence.html\n     * @param sequence The sequence to send\n     * @returns Promise\n     */\n    CmsisDAP.prototype.swjSequence = function (sequence) {\n        var bitLength = sequence.byteLength * 8;\n        var data = this.bufferSourceToUint8Array(bitLength, sequence);\n        return this.send(18 /* DAP_SWJ_SEQUENCE */, data)\n            .then(function () { return undefined; });\n    };\n    /**\n     * Configure Transfer\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__TransferConfigure.html\n     * @param idleCycles Number of extra idle cycles after each transfer\n     * @param waitRetry Number of transfer retries after WAIT response\n     * @param matchRetry Number of retries on reads with Value Match in DAP_Transfer\n     * @returns Promise\n     */\n    CmsisDAP.prototype.configureTransfer = function (idleCycles, waitRetry, matchRetry) {\n        var data = new Uint8Array(5);\n        var view = new DataView(data.buffer);\n        view.setUint8(0, idleCycles);\n        view.setUint16(1, waitRetry, true);\n        view.setUint16(3, matchRetry, true);\n        return this.send(4 /* DAP_TRANSFER_CONFIGURE */, data)\n            .then(function () { return undefined; });\n    };\n    /**\n     * Send a command\n     * @param command Command to send\n     * @param data Data to use\n     * @returns Promise of DataView\n     */\n    CmsisDAP.prototype.send = function (command, data) {\n        var _this = this;\n        var array = this.bufferSourceToUint8Array(command, data);\n        return this.transport.write(array)\n            .then(function () { return _this.transport.read(); })\n            .then(function (response) {\n            if (response.getUint8(0) !== command) {\n                throw new Error(\"Bad response for \" + command + \" -> \" + response.getUint8(0));\n            }\n            switch (command) {\n                case 3 /* DAP_DISCONNECT */:\n                case 8 /* DAP_WRITE_ABORT */:\n                case 9 /* DAP_DELAY */:\n                case 10 /* DAP_RESET_TARGET */:\n                case 17 /* DAP_SWJ_CLOCK */:\n                case 18 /* DAP_SWJ_SEQUENCE */:\n                case 19 /* DAP_SWD_CONFIGURE */:\n                case 29 /* DAP_SWD_SEQUENCE */:\n                case 23 /* DAP_SWO_TRANSPORT */:\n                case 24 /* DAP_SWO_MODE */:\n                case 26 /* DAP_SWO_CONTROL */:\n                case 21 /* DAP_JTAG_CONFIGURE */:\n                case 22 /* DAP_JTAG_ID_CODE */:\n                case 4 /* DAP_TRANSFER_CONFIGURE */:\n                    if (response.getUint8(1) !== 0 /* DAP_OK */) {\n                        throw new Error(\"Bad status for \" + command + \" -> \" + response.getUint8(1));\n                    }\n            }\n            return response;\n        });\n    };\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    CmsisDAP.prototype.connect = function () {\n        var _this = this;\n        return this.transport.open()\n            .then(function () { return _this.send(17 /* DAP_SWJ_CLOCK */, new Uint32Array([_this.clockFrequency])); })\n            .then(function () { return _this.send(2 /* DAP_CONNECT */, new Uint8Array([_this.mode])); })\n            .then(function (result) {\n            if (result.getUint8(1) === 0 /* FAILED */ || _this.mode !== 0 /* DEFAULT */ && result.getUint8(1) !== _this.mode) {\n                throw new Error(\"Mode not enabled.\");\n            }\n        })\n            .then(function () { return _this.configureTransfer(0, 100, 0); })\n            .then(function () { return _this.selectProtocol(1 /* SWD */); });\n    };\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    CmsisDAP.prototype.disconnect = function () {\n        var _this = this;\n        return this.send(3 /* DAP_DISCONNECT */)\n            .then(function () {\n            return _this.transport.close();\n        });\n    };\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    CmsisDAP.prototype.reconnect = function () {\n        var _this = this;\n        return this.disconnect()\n            .then(function () { return _this.delay(100); })\n            .then(function () { return _this.connect(); });\n    };\n    /**\n     * Reset target device\n     * @returns Promise of whether a device specific reset sequence is implemented\n     */\n    CmsisDAP.prototype.reset = function () {\n        return this.send(10 /* DAP_RESET_TARGET */)\n            .then(function (response) { return response.getUint8(2) === 1 /* RESET_SEQUENCE */; });\n    };\n    /**\n     * Get DAP information\n     * @param request Type of information to get\n     * @returns Promise of DataView\n     */\n    CmsisDAP.prototype.dapInfo = function (request) {\n        return this.send(0 /* DAP_INFO */, new Uint8Array([request]))\n            .then(function (result) {\n            var length = result.getUint8(1);\n            if (length === 0) {\n                return null;\n            }\n            switch (request) {\n                case 240 /* CAPABILITIES */:\n                case 254 /* PACKET_COUNT */:\n                case 255 /* PACKET_SIZE */:\n                case 253 /* SWO_TRACE_BUFFER_SIZE */:\n                    // Byte\n                    if (length === 1)\n                        return result.getUint8(2);\n                    // Short\n                    if (length === 2)\n                        return result.getUint16(2);\n                    // Word\n                    if (length === 4)\n                        return result.getUint32(2);\n            }\n            var ascii = new Uint8Array(result.buffer, 2, length);\n            return String.fromCharCode.apply(null, ascii);\n        });\n    };\n    CmsisDAP.prototype.transfer = function (portOrOps, mode, register, value) {\n        var operations;\n        if (typeof portOrOps === \"number\") {\n            operations = [{\n                    port: portOrOps,\n                    mode: mode,\n                    register: register,\n                    value: value\n                }];\n        }\n        else {\n            operations = portOrOps;\n        }\n        var data = new Uint8Array(TRANSFER_HEADER_SIZE + (operations.length * TRANSFER_OPERATION_SIZE));\n        var view = new DataView(data.buffer);\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint8(1, operations.length);\n        operations.forEach(function (operation, index) {\n            var offset = TRANSFER_HEADER_SIZE + (index * TRANSFER_OPERATION_SIZE);\n            // Transfer request\n            view.setUint8(offset, operation.port | operation.mode | operation.register);\n            // Transfer data\n            view.setUint32(offset + 1, operation.value, true);\n        });\n        return this.send(5 /* DAP_TRANSFER */, data)\n            .then(function (result) {\n            // Transfer count\n            if (result.getUint8(1) !== operations.length) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n            // Transfer response\n            var response = result.getUint8(2);\n            if (response === 2 /* WAIT */) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response === 4 /* FAULT */) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response === 8 /* PROTOCOL_ERROR */) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response === 16 /* VALUE_MISMATCH */) {\n                throw new Error(\"Transfer response VALUE_MISMATCH\");\n            }\n            if (response === 7 /* NO_ACK */) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n            if (typeof portOrOps === \"number\") {\n                return result.getUint32(3, true);\n            }\n            else {\n                var length_1 = operations.length * 4;\n                return new Uint32Array(result.buffer.slice(3, 3 + length_1));\n            }\n        });\n    };\n    CmsisDAP.prototype.transferBlock = function (port, register, countOrValues) {\n        var operationCount;\n        var mode;\n        var dataSize = BLOCK_HEADER_SIZE;\n        if (typeof countOrValues === \"number\") {\n            operationCount = countOrValues;\n            mode = 2 /* READ */;\n        }\n        else {\n            operationCount = countOrValues.length;\n            mode = 0 /* WRITE */;\n            dataSize += countOrValues.byteLength;\n        }\n        var data = new Uint8Array(dataSize);\n        var view = new DataView(data.buffer);\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint16(1, operationCount, true);\n        // Transfer request\n        view.setUint8(3, port | mode | register);\n        if (typeof countOrValues !== \"number\") {\n            // Transfer data\n            data.set(countOrValues, BLOCK_HEADER_SIZE);\n        }\n        return this.send(6 /* DAP_TRANSFER_BLOCK */, view)\n            .then(function (result) {\n            // Transfer count\n            if (result.getUint16(1, true) !== operationCount) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n            // Transfer response\n            var response = result.getUint8(3);\n            if (response & 2 /* WAIT */) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response & 4 /* FAULT */) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response & 8 /* PROTOCOL_ERROR */) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response & 7 /* NO_ACK */) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n            if (typeof countOrValues === \"number\") {\n                return new Uint32Array(result.buffer.slice(4));\n            }\n        });\n    };\n    return CmsisDAP;\n}(events_1.EventEmitter));\nexports.CmsisDAP = CmsisDAP;\n\n\n\n},{\"events\":16}],7:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cmsis_dap_1 = require(\"./cmsis-dap\");\nexports.CmsisDAP = cmsis_dap_1.CmsisDAP;\n\n\n\n},{\"./cmsis-dap\":6}],8:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar os_1 = require(\"os\");\nvar node_hid_1 = require(\"node-hid\");\n/**\n * HID Transport class\n */\nvar HID = /** @class */ (function () {\n    /**\n     * HID constructor\n     * @param path Path to HID device to use\n     */\n    function HID(deviceOrPath) {\n        this.os = os_1.platform();\n        this.path = null;\n        this.device = null;\n        this.packetSize = 64;\n        function isDevice(source) {\n            return source.path !== undefined;\n        }\n        this.path = isDevice(deviceOrPath) ? deviceOrPath.path : deviceOrPath;\n    }\n    /**\n     * Open device\n     * @returns Promise\n     */\n    HID.prototype.open = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.path.length) {\n                return reject(\"No path specified\");\n            }\n            try {\n                _this.device = new node_hid_1.HID(_this.path);\n                resolve();\n            }\n            catch (ex) {\n                reject(ex);\n            }\n        });\n    };\n    /**\n     * Close device\n     * @returns Promise\n     */\n    HID.prototype.close = function () {\n        var _this = this;\n        return new Promise(function (resolve, _reject) {\n            if (_this.device) {\n                _this.device.close();\n                _this.device = null;\n            }\n            resolve();\n        });\n    };\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    HID.prototype.read = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.device.read(function (error, data) {\n                if (error) {\n                    return reject(error);\n                }\n                var buffer = new Uint8Array(data).buffer;\n                resolve(new DataView(buffer));\n            });\n        });\n    };\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    HID.prototype.write = function (data) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            function isView(source) {\n                return source.buffer !== undefined;\n            }\n            var arrayBuffer = isView(data) ? data.buffer : data;\n            var array = Array.prototype.slice.call(new Uint8Array(arrayBuffer));\n            // Pad to packet size\n            while (array.length < _this.packetSize)\n                array.push(0);\n            // Windows requires the prepend of an extra byte\n            // https://github.com/node-hid/node-hid/blob/master/README.md#prepend-byte-to-hid_write\n            if (_this.os === \"win32\") {\n                array.unshift(0); // prepend throwaway byte\n            }\n            var bytesWritten = _this.device.write(array);\n            if (bytesWritten !== array.length)\n                return reject(\"Incorrect bytecount written\");\n            resolve();\n        });\n    };\n    return HID;\n}());\nexports.HID = HID;\n\n\n\n},{\"node-hid\":14,\"os\":18}],9:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hid_1 = require(\"./hid\");\nexports.HID = hid_1.HID;\nvar usb_1 = require(\"./usb\");\nexports.USB = usb_1.USB;\nvar webusb_1 = require(\"./webusb\");\nexports.WebUSB = webusb_1.WebUSB;\n\n\n\n},{\"./hid\":8,\"./usb\":10,\"./webusb\":11}],10:[function(require,module,exports){\n(function (Buffer){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar usb_1 = require(\"usb\");\n/**\n * @hidden\n */\nvar DEFAULT_CONFIGURATION = 1;\n/**\n * @hidden\n */\nvar DEFAULT_CLASS = 0xFF;\n/**\n * @hidden\n */\nvar GET_REPORT = 0x01;\n/**\n * @hidden\n */\nvar SET_REPORT = 0x09;\n/**\n * @hidden\n */\nvar OUT_REPORT = 0x200;\n/**\n * @hidden\n */\nvar IN_REPORT = 0x100;\n/**\n * USB Transport class\n */\nvar USB = /** @class */ (function () {\n    /**\n     * USB constructor\n     * @param device USB device to use\n     * @param interfaceClass Optional interface class to use (default: 0xFF)\n     * @param configuration Optional Configuration to use (default: 1)\n     * @param alwaysControlTransfer Whether to always use control transfer instead of endpoints (default: false)\n     */\n    function USB(device, interfaceClass, configuration, alwaysControlTransfer) {\n        if (interfaceClass === void 0) { interfaceClass = DEFAULT_CLASS; }\n        if (configuration === void 0) { configuration = DEFAULT_CONFIGURATION; }\n        if (alwaysControlTransfer === void 0) { alwaysControlTransfer = false; }\n        this.device = device;\n        this.interfaceClass = interfaceClass;\n        this.configuration = configuration;\n        this.alwaysControlTransfer = alwaysControlTransfer;\n        this.packetSize = 64;\n    }\n    USB.prototype.bufferToDataView = function (buffer) {\n        var arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    };\n    USB.prototype.bufferSourceToBuffer = function (bufferSource) {\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(bufferSource) ? bufferSource.buffer : bufferSource;\n        return new Buffer(arrayBuffer);\n    };\n    USB.prototype.extendBuffer = function (data, packetSize) {\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(data) ? data.buffer : data;\n        var length = Math.min(arrayBuffer.byteLength, packetSize);\n        var result = new Uint8Array(length);\n        result.set(new Uint8Array(arrayBuffer));\n        return result;\n    };\n    /**\n     * Open device\n     * @returns Promise\n     */\n    USB.prototype.open = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.device.open();\n            _this.device.setConfiguration(_this.configuration, function (error) {\n                if (error)\n                    return reject(error);\n                var interfaces = _this.device.interfaces.filter(function (iface) {\n                    return iface.descriptor.bInterfaceClass === _this.interfaceClass;\n                });\n                if (!interfaces.length) {\n                    throw new Error(\"No valid interfaces found.\");\n                }\n                var selectedInterface = interfaces[0];\n                _this.interfaceNumber = selectedInterface.interfaceNumber;\n                // If we always want to use control transfer, don't find/set endpoints and claim interface\n                if (!_this.alwaysControlTransfer) {\n                    var endpoints = selectedInterface.endpoints;\n                    _this.endpointIn = null;\n                    _this.endpointOut = null;\n                    for (var _i = 0, endpoints_1 = endpoints; _i < endpoints_1.length; _i++) {\n                        var endpoint = endpoints_1[_i];\n                        if (endpoint.direction === \"in\")\n                            _this.endpointIn = endpoint;\n                        else\n                            _this.endpointOut = endpoint;\n                    }\n                    // If endpoints are found, claim the interface\n                    if (_this.endpointIn || _this.endpointOut) {\n                        // If the interface can't be claimed, use control transfer\n                        try {\n                            selectedInterface.claim();\n                        }\n                        catch (_e) {\n                            _this.endpointIn = null;\n                            _this.endpointOut = null;\n                        }\n                    }\n                }\n                resolve();\n            });\n        });\n    };\n    /**\n     * Close device\n     * @returns Promise\n     */\n    USB.prototype.close = function () {\n        var _this = this;\n        return new Promise(function (resolve, _reject) {\n            _this.device.close();\n            resolve();\n        });\n    };\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    USB.prototype.read = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // Use endpoint if it exists\n            if (_this.endpointIn) {\n                return _this.endpointIn.transfer(_this.packetSize, function (error, buffer) {\n                    if (error)\n                        return reject(error);\n                    resolve(_this.bufferToDataView(buffer));\n                });\n            }\n            // Fallback to using control transfer\n            _this.device.controlTransfer(usb_1.LIBUSB_ENDPOINT_IN | usb_1.LIBUSB_REQUEST_TYPE_CLASS | usb_1.LIBUSB_RECIPIENT_INTERFACE, GET_REPORT, IN_REPORT, _this.interfaceNumber, _this.packetSize, function (error, buffer) {\n                if (error)\n                    return reject(error);\n                resolve(_this.bufferToDataView(buffer));\n            });\n        });\n    };\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    USB.prototype.write = function (data) {\n        var _this = this;\n        var extended = this.extendBuffer(data, this.packetSize);\n        var buffer = this.bufferSourceToBuffer(extended);\n        return new Promise(function (resolve, reject) {\n            // Use endpoint if it exists\n            if (_this.endpointOut) {\n                return _this.endpointOut.transfer(buffer, function (error) {\n                    if (error)\n                        return reject(error);\n                    resolve();\n                });\n            }\n            // Fallback to using control transfer\n            _this.device.controlTransfer(usb_1.LIBUSB_ENDPOINT_OUT | usb_1.LIBUSB_REQUEST_TYPE_CLASS | usb_1.LIBUSB_RECIPIENT_INTERFACE, SET_REPORT, OUT_REPORT, _this.interfaceNumber, buffer, function (error) {\n                if (error)\n                    return reject(error);\n                resolve();\n            });\n        });\n    };\n    return USB;\n}());\nexports.USB = USB;\n\n\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"buffer\":15,\"usb\":14}],11:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @hidden\n */\nvar DEFAULT_CONFIGURATION = 1;\n/**\n * @hidden\n */\nvar DEFAULT_CLASS = 0xFF;\n/**\n * @hidden\n */\nvar GET_REPORT = 0x01;\n/**\n * @hidden\n */\nvar SET_REPORT = 0x09;\n/**\n * @hidden\n */\nvar OUT_REPORT = 0x200;\n/**\n * @hidden\n */\nvar IN_REPORT = 0x100;\n/**\n * WebUSB Transport class\n * https://wicg.github.io/webusb/\n */\nvar WebUSB = /** @class */ (function () {\n    /**\n     * WebUSB constructor\n     * @param device WebUSB device to use\n     * @param interfaceClass Optional interface class to use (default: 0xFF)\n     * @param configuration Optional Configuration to use (default: 1)\n     */\n    function WebUSB(device, interfaceClass, configuration) {\n        if (interfaceClass === void 0) { interfaceClass = DEFAULT_CLASS; }\n        if (configuration === void 0) { configuration = DEFAULT_CONFIGURATION; }\n        this.device = device;\n        this.interfaceClass = interfaceClass;\n        this.configuration = configuration;\n        this.packetSize = 64;\n    }\n    WebUSB.prototype.extendBuffer = function (data, packetSize) {\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(data) ? data.buffer : data;\n        var length = Math.min(arrayBuffer.byteLength, packetSize);\n        var result = new Uint8Array(length);\n        result.set(new Uint8Array(arrayBuffer));\n        return result;\n    };\n    /**\n     * Open device\n     * @returns Promise\n     */\n    WebUSB.prototype.open = function () {\n        var _this = this;\n        return this.device.open()\n            .then(function () { return _this.device.selectConfiguration(_this.configuration); })\n            .then(function () {\n            var interfaces = _this.device.configuration.interfaces.filter(function (iface) {\n                return iface.alternates[0].interfaceClass === _this.interfaceClass;\n            });\n            if (!interfaces.length) {\n                throw new Error(\"No valid interfaces found.\");\n            }\n            _this.interfaceNumber = interfaces[0].interfaceNumber;\n            return _this.device.claimInterface(_this.interfaceNumber);\n        });\n    };\n    /**\n     * Close device\n     * @returns Promise\n     */\n    WebUSB.prototype.close = function () {\n        return this.device.close();\n    };\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    WebUSB.prototype.read = function () {\n        return this.device.controlTransferIn({\n            requestType: \"class\",\n            recipient: \"interface\",\n            request: GET_REPORT,\n            value: IN_REPORT,\n            index: this.interfaceNumber\n        }, this.packetSize)\n            .then(function (result) { return result.data; });\n    };\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    WebUSB.prototype.write = function (data) {\n        var buffer = this.extendBuffer(data, this.packetSize);\n        return this.device.controlTransferOut({\n            requestType: \"class\",\n            recipient: \"interface\",\n            request: SET_REPORT,\n            value: OUT_REPORT,\n            index: this.interfaceNumber\n        }, buffer)\n            .then(function () { return undefined; });\n    };\n    return WebUSB;\n}());\nexports.WebUSB = WebUSB;\n\n\n\n},{}],12:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar transport_1 = require(\"./transport\");\nexports.HID = transport_1.HID;\nexports.USB = transport_1.USB;\nexports.WebUSB = transport_1.WebUSB;\nvar proxy_1 = require(\"./proxy\");\nexports.CmsisDAP = proxy_1.CmsisDAP;\nvar daplink_1 = require(\"./daplink\");\nexports.DAPLink = daplink_1.DAPLink;\nvar dap_1 = require(\"./dap\");\nexports.ADI = dap_1.ADI;\nvar processor_1 = require(\"./processor\");\nexports.CortexM = processor_1.CortexM;\n\n\n\n},{\"./dap\":2,\"./daplink\":3,\"./processor\":5,\"./proxy\":7,\"./transport\":9}],13:[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n},{}],14:[function(require,module,exports){\n\n},{}],15:[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (ArrayBuffer.isView(buf)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n},{\"base64-js\":13,\"ieee754\":17}],16:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],17:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],18:[function(require,module,exports){\nexports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n\n},{}]},{},[12])(12)\n});\n"],"file":"dap.bundle.js","sourceRoot":"../lib"}